/********************************************************************************************************************************************************************************************************************************************************
 * Fish Tank automation project - TCC -  main file
 * Developer: Pablo
 * 
 * Date: 24/10/2019
 * 
 * ToDo[PS] - need to improve the comments
 * 1) Implementar o módulo Light
*********************************************************************************************************************************************************************************************************************************************************/


/********************************************************************************************************************************************************************************************************************************************************
    ### Headers includes 
*********************************************************************************************************************************************************************************************************************************************************/
#include "General_types.h"
#include "main.h"


/********************************************************************************************************************************************************************************************************************************************************
    ### Extern Global Variables
*********************************************************************************************************************************************************************************************************************************************************/
#ifdef _MODULE_TYPE_PLUGS
    Plugs_t module;
    Plugs_t status_module;
#endif
#ifdef _MODULE_TYPE_LIGTH
    Ligths_t module;
    Ligths_t status_module;
#endif


/********************************************************************************************************************************************************************************************************************************************************
    ### Global Variables into this scope (this file *.c) 
*********************************************************************************************************************************************************************************************************************************************************/
MainData_t mainData;   /* Main Data of Module */
static int Counter1Of10ms = 0;
static int Counter2Of10ms = 0;
static int Counter3Of10ms = 0;


/********************************************************************************************************************************************************************************************************************************************************
    Callback function of Timer1
    Description: This callback function refers to Timer1. Runs every 10ms.
*********************************************************************************************************************************************************************************************************************************************************/
ISR(TIMER1_OVF_vect)
{
    Counter1Of10ms++;
    Counter2Of10ms++;
    Counter3Of10ms++;
    TCNT1 = 65380;  /* Instrução para o periférico - Reconfigura o contador do TIMER1 para chamar a ISR após 10ms */
}


/********************************************************************************************************************************************************************************************************************************************************
    Setup function
    Description: It configure hardware and initialize variables.
*********************************************************************************************************************************************************************************************************************************************************/
void setup()
{
    /* Inicializar os dados do Slave */
    Comm_appl_Init_Slave_Data(&mainData.uart, _CONFIG_MODULE_TYPE, _CONFIG_MODULE_DATA_SIZE);  /* Tomada:{ID = 0x02, Length = 0x14 ou 20}; Iluminação:{ID = 0x03, Length = 0x0E ou 14}*/
    /* Inicializar os periféricos do Slave*/
    Config_configGPIO();
    Config_configUART();
    Config_configTIMER();
}


/********************************************************************************************************************************************************************************************************************************************************
    Loop function
    Description: It manage call tasks.
*********************************************************************************************************************************************************************************************************************************************************/
void loop()
{
    if(Counter1Of10ms >= T10ms){
        Counter1Of10ms = 0;
        Task10ms();  /* call Task10ms() */
    }
    if(Counter2Of10ms >= T500ms){
        Counter2Of10ms = 0;
        Task500ms();  /* call Task500ms() */
    }
    if(Counter3Of10ms >= T1000ms){
        Counter3Of10ms = 0;
        Task1000ms();  /* call Task1000ms() */
    }
}


/********************************************************************************************************************************************************************************************************************************************************
    Task 10ms
    Description: It process state's machines state. It runs each 10ms.
*********************************************************************************************************************************************************************************************************************************************************/
void Task10ms(void)
{
    Comm_appl_FSM(&mainData.uart);
    Comm_appl_FRM(&mainData.uart);
    Comm_appl_RHM(&mainData.uart);
}


/********************************************************************************************************************************************************************************************************************************************************
    Task 500ms
    Description: It process blink of led. It runs each 500ms.
*********************************************************************************************************************************************************************************************************************************************************/
void Task500ms(void)
{
    digitalWrite(LED_ON_BOARD, !digitalRead(LED_ON_BOARD));
}


/********************************************************************************************************************************************************************************************************************************************************
    Task 1000ms
    Description: It runs each 1000ms.
*********************************************************************************************************************************************************************************************************************************************************/
#ifdef _MODULE_TYPE_PLUGS
void Task1000ms(void)
{
    Control_appl_SMC(&mainData.control);
}
#endif

#ifdef _MODULE_TYPE_LIGTH
void Task1000ms(void)
{
    Control_appl_SMC(&mainData.control);
}
#endif




/*
 Datasheet: http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf
 Manual: https://data2.manualslib.com/pdf5/121/12021/1202096-atmel/atmega48a.pdf?e996624a392c69ca68be012dd76f1410
 
 Fóruns:
   https://www.avrfreaks.net/forum/atmega328p-serial-communication-interrupt
   https://stackoverflow.com/questions/47017860/interrupt-driven-usart-using-udre-with-atmega328p
*/


/*

int incomming, i;
  if(Serial.available() > 0){
    incomming = Serial.available();
    Serial.print("incomming: ");
    Serial.println(incomming, DEC);
    //incomming = Serial.read();
    i = Serial.readBytes(RxBuffer, incomming);
    Serial.print("data: ");
    Serial.println(i, DEC);
    Serial.println(RxBuffer);
  }

*/
