/********************************************************************************************************************************************************************************************************************************************************
 * Fish Tank automation project - TCC -  Control_appl file
 * Developer: Pablo
 * 
 * ToDo[PS] - need to improve the comments
*********************************************************************************************************************************************************************************************************************************************************/


/********************************************************************************************************************************************************************************************************************************************************
    ### Headers includes 
*********************************************************************************************************************************************************************************************************************************************************/
#include "General_types.h"
#include "Control_appl.h"


/********************************************************************************************************************************************************************************************************************************************************
    ### Global Variables into this scope (this file *.c) 
*********************************************************************************************************************************************************************************************************************************************************/


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Setting GPIOs
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_SMC( Control_t *pControl ){
    switch (pControl->SMC_State){
        case SMC_State_Idle:
        {
            //A inicialização do módulo pode ser feita aqui, pois este estado será chamado apena na primeira chamada desta máquina de estados
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Read_S1);
            break;
        }
        case SMC_State_Read_S1:   /* Controlling of module based on struct set_module */
        {
            Control_appl_Read_S1(pControl);
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Read_S2);
            break;
        }
        case SMC_State_Read_S2:   /* Return status of module on struct status_module */
        {
            Control_appl_Read_S2(pControl);
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Read_S3);
            break;
        }
        case SMC_State_Read_S3:   /* Controlling of module based on struct set_module */
        {
            Control_appl_Read_S3(pControl);
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Read_S4);
            break;
        }
        case SMC_State_Read_S4:   /* Return status of module on struct status_module */
        {
            Control_appl_Read_S4(pControl);
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Read_S5);
            break;
        }
        case SMC_State_Read_S5:   /* Return status of module on struct status_module */
        {
            Control_appl_Read_S5(pControl);
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Read_S1);
            break;
        }
        case SMC_State_Error:
        {
            /* ToDo[PENS] error handler */
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Idle);
            break;
        } 
        default:
        {
            /* ToDo[PENS] - default handler */
            Control_appl_Request_ChangeOf_SMC_State(pControl, SMC_State_Idle);
        }
    }
}


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Setting GPIOs
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_Request_ChangeOf_SMC_State( Control_t *pControl, SMC_States_t nextState)
{
    pControl->SMC_State = nextState;
}


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Read SENSOR 1
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_Read_S1( Control_t *pControl )
{
    pControl->module.sensor_1.type  = 0x00;
    pControl->module.sensor_1.value = 0x00;
}


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Read SENSOR 2
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_Read_S2( Control_t *pControl )
{
    pControl->module.sensor_2.type  = 0x00;
    pControl->module.sensor_2.value = 0x00;
}


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Read SENSOR 3
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_Read_S3( Control_t *pControl )
{
    pControl->module.sensor_3.type  = 0x00;
    pControl->module.sensor_3.value = 0x00;
}


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Read SENSOR 4
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_Read_S4( Control_t *pControl )
{
    pControl->module.sensor_4.type  = 0x00;
    pControl->module.sensor_4.value = 0x00;
}


/********************************************************************************************************************************************************************************************************************************************************
  @Brief: Read SENSOR 5
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_Read_S5( Control_t *pControl )
{
    pControl->module.sensor_5.type  = 0x00;
    pControl->module.sensor_5.value = 0x00;
}
