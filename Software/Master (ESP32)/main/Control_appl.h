/******************************************************************************************************************************************************************************************************************************************************** 
 * Control_appl.h
 * 
 * ToDo[PS]-  Need to insert comments
*********************************************************************************************************************************************************************************************************************************************************/


#ifndef _CONTROL_APPL_H
#define _CONTROL_APPL_H


/********************************************************************************************************************************************************************************************************************************************************
    ### Headers includes 
*********************************************************************************************************************************************************************************************************************************************************/


/******************************************************************************************************************************************************************************************************************************************************** 
    ### Libraries includes 
*********************************************************************************************************************************************************************************************************************************************************/ 


/******************************************************************************************************************************************************************************************************************************************************** 
    ### Defines 
*********************************************************************************************************************************************************************************************************************************************************/


/******************************************************************************************************************************************************************************************************************************************************** 
    ### Data Types 
*********************************************************************************************************************************************************************************************************************************************************/
typedef struct{
    byte type;
    byte value;
}Sensor_t;
    
typedef struct{
    Sensor_t sensor_1;
    Sensor_t sensor_2;
    Sensor_t sensor_3;
    Sensor_t sensor_4;
    Sensor_t sensor_5;
    byte hour_msb;
    byte hour_lsb;
}Sensors_t;

typedef enum {
    SMC_State_Idle    = 0,
    SMC_State_Read_S1 = 1,
    SMC_State_Read_S2 = 2,
    SMC_State_Read_S3 = 3,
    SMC_State_Read_S4 = 4,
    SMC_State_Read_S5 = 5,
    SMC_State_Error   = 6,
}SMC_States_t;

typedef struct{
    Sensors_t module;                           /* Estrutura que conterá os TIPO e VALOR de cada sensor conectado ao módulo (O ESP32 também faz a função de módulo de sensores). Esta estrutura fornecerá as informações dos sensores para serem enviadas no barramento */
    SMC_States_t SMC_State =  SMC_State_Idle;   /* Variável enumerada que armazenará o estado da máquina de enviar frame (Frame Sending Machine) */
}Control_t;


/******************************************************************************************************************************************************************************************************************************************************** 
    ### Constants
*********************************************************************************************************************************************************************************************************************************************************/


/******************************************************************************************************************************************************************************************************************************************************** 
    ### Functions Prototypes 
*********************************************************************************************************************************************************************************************************************************************************/
void Control_appl_SMC( Control_t * );   /* SMC = States Machine of Controlling (Máquina de Estados do Controle) */
void Control_appl_Request_ChangeOf_SMC_State( Control_t *, SMC_States_t );

void Control_appl_Read_S1( Control_t * );
void Control_appl_Read_S2( Control_t * );
void Control_appl_Read_S3( Control_t * );
void Control_appl_Read_S4( Control_t * );
void Control_appl_Read_S5( Control_t * );


#endif
