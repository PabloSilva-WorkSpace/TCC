/********************************************************************************************************************************************************************************************************************************************************
 * Fish Tank automation project - TCC -  main file
 * Developer: Pablo
 * 
 * ToDo[PS] - need to improve the comments
 * 1) Alocação de slots - Dinamica ou Estatica
 * 2) Gravar e ler dados na NVS
 * 3) Comunicação MQTT
*********************************************************************************************************************************************************************************************************************************************************/


/********************************************************************************************************************************************************************************************************************************************************
    ### Headers includes 
*********************************************************************************************************************************************************************************************************************************************************/
#include "main.h"


/********************************************************************************************************************************************************************************************************************************************************
    ### Global Variables into this scope (this file *.c) 
*********************************************************************************************************************************************************************************************************************************************************/
MainData_t mainData;  /* Main Data of Module */
const int WIFI_CONNECTED_BIT = BIT0;


/********************************************************************************************************************************************************************************************************************************************************
    Setup function
    Description: It configure hardware and initialize variables.
*********************************************************************************************************************************************************************************************************************************************************/
void setup()
{
  Config_configGPIO();
  Config_configUART();
  mainData.wifi.callback = &wifi_event_handler;      /* Definição da função de callback que trata dos eventos da rede WiFi. */
  mainData.wifi.event_group = xEventGroupCreate();   /* Criação de um eventgroup para sinalização do status da rede WiFi. */
  Config_configWIFI(mainData.wifi.callback, &mainData.wifi.event_group);
  vTaskDelay(2000/portTICK_PERIOD_MS);

  //xEventGroupWaitBits( mainData.wifi.event_group, WIFI_CONNECTED_BIT, false, true, portMAX_DELAY );
  
  /* Create Schedule Table */
  Comm_appl_Create_Schedule_Table(  &mainData.uart.scheduleTable );
  /* Tasks create */
  xTaskCreatePinnedToCore(TaskFSRM, "TaskFSRM", 2048*3, NULL, 2, NULL, 0);
  xTaskCreatePinnedToCore(TaskUART_TX, "TaskUART_TX", 2048*1, NULL, 3, NULL, 0);
}


/********************************************************************************************************************************************************************************************************************************************************
    Loop function
    Description: It manage call tasks.
*********************************************************************************************************************************************************************************************************************************************************/
void loop()
{
  vTaskDelay(1000/portTICK_PERIOD_MS);
}


/********************************************************************************************************************************************************************************************************************************************************
  Task FSRM
  @Brief: Task responsável por processar as máquinas de estado de transmissão (Tx) e recepção (Rx) de frames.
*********************************************************************************************************************************************************************************************************************************************************/
void TaskFSRM(void* Parameters)
{
  for(;;){
    Comm_appl_FSM(&mainData.uart);
    Comm_appl_FRM(&mainData.uart);
    Comm_appl_RHM(&mainData.uart);
    vTaskDelay(10/portTICK_PERIOD_MS);
  }
}


/********************************************************************************************************************************************************************************************************************************************************
  Task UART TX
  @Brief: Task responsável por alterar o estado da máquina de transmissão (Tx), com o propósito da UART transmitir frames.
*********************************************************************************************************************************************************************************************************************************************************/
void TaskUART_TX(void* Parameters)
{
  for(;;){
    digitalWrite(LED_ON_BOARD, !digitalRead(LED_ON_BOARD));
    Comm_appl_Request_ChangeOf_RHM_State(&mainData.uart, RHM_State_TxUart_Send_Request);
    vTaskDelay(500/portTICK_PERIOD_MS);
  }
}




/*
Posts Relevantes / Bibliografia 

https://techtutorialsx.com/2019/08/15/esp32-arduino-getting-wifi-event-information/
Tutorial que ensina a manipular usar as informações de eventos do wifi do ESP32


*/
